version: 0.2

env:
  variables:
    PHP_VERSION: "8.3.8" # Example environment variable, update if needed.

phases:
  install:
    commands:
      - echo "Updating system dependencies..."
      - sudo dnf update -y

      - echo "Adding MySQL repository..."
      - sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
      - sudo dnf install -y https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm
      - sudo dnf config-manager --enable mysql80-community

      - echo "Installing MySQL client..."
      - |
        if sudo dnf install -y mysql-community-client --nogpgcheck; then
          echo "MySQL client installed successfully."
        else
          echo "MySQL client package not found in the repository. Attempting alternative installation..."
          sudo dnf install -y mysql || echo "Alternative MySQL client installation failed. Proceeding with Docker fallback if necessary."
        fi

      - echo "Installing other required tools..."
      - sudo dnf install -y unzip git docker

      - echo "Starting Docker service..."
      - sudo service docker start

  pre_build:
    commands:
      - echo "Fetching environment variables from AWS SSM Parameter Store..."
      - set +x  # Prevent logging sensitive data
      - export DB_HOST=$(aws ssm get-parameter --name "/expressuddb/db_host" --query Parameter.Value --output text)
      - export DB_PORT=$(aws ssm get-parameter --name "/expressuddb/db_port" --query Parameter.Value --output text)
      - export DB_DATABASE=$(aws ssm get-parameter --name "/expressuddb/db_name" --query Parameter.Value --output text)
      - export DB_USERNAME=$(aws ssm get-parameter --name "/expressuddb/db_user" --query Parameter.Value --output text)
      - export DB_PASSWORD=$(aws ssm get-parameter --name "/expressuddb/db_password" --with-decryption --query Parameter.Value --output text)
      - set -x  # Re-enable logging for non-sensitive steps
      - echo "Environment variables fetched successfully."

      - echo "Testing database connectivity..."
      - |
        if mysql -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USERNAME" -p"$DB_PASSWORD" -e "SHOW DATABASES;"; then
          echo "Successfully connected to the database."
        else
          echo "Failed to connect to the database using MySQL client."
          echo "Switching to Docker MySQL client for further testing..."
          docker run --rm -e MYSQL_PWD=$DB_PASSWORD mysql:8.0 \
            mysql -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USERNAME" -e "SHOW DATABASES;" || \
          (echo "Docker MySQL client also failed to connect. Exiting..." && exit 1)
        fi

  build:
    commands:
      - echo "Building the application..."
      - echo "Installing dependencies using Composer..."
      - curl -sS https://getcomposer.org/installer | php
      - sudo mv composer.phar /usr/local/bin/composer
      - composer install --no-dev --optimize-autoloader

  post_build:
    commands:
      - echo "Build completed successfully."

artifacts:
  files:
    - '**/*'
    - '!node_modules/**/*'
  base-directory: /codebuild/output/src
